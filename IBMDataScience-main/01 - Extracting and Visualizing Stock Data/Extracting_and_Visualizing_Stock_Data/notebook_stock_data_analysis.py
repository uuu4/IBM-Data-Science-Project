# -*- coding: utf-8 -*-
"""Notebook_Stock_Data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VPkLw_OX4oX0039LY8TxHfj75QhpdIC6

<a href="https://colab.research.google.com/github/marcoshsq/Stocks_Market_Data_Analysis/blob/main/Extracting_and_Visualizing_Stock_Data.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# **Extracting and Visualizing Stock Data**

---

### Description:

It's very important for a Data Scientist to know how to collect, analyze and create visualizations with collected data for decision making. 

This project aims to practice such skills, analyzing the stock data from Tesla and GameStop.

In these first two cells we install and import the relevant libraries for the project.
"""

!pip install yfinance
#!pip install pandas
#!pip install requests
!pip install bs4
#!pip install plotly

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

"""# Define Graphing Function

In this section, we define the function make_graph. The make_graph function takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.
"""

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data.Date, infer_datetime_format=True), y=stock_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data.Date, infer_datetime_format=True), y=revenue_data.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

"""# Using yfinance to Extract Stock Data (TSLA)

Using the Ticker function, we enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.
"""

tesla = yf.Ticker('TSLA')

"""Using the ticker object and the function history, we extract stock information and save it in a dataframe named tesla_data. 

Then we set the period parameter to max so we get information for the maximum amount of time.
"""

tesla_data = tesla.history(period="max")

"""Now we reset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function."""

tesla_data.reset_index(inplace=True)
tesla_data.head()

"""# Using Webscraping to Extract Tesla Revenue Data (TSLA)

We'll use the requests library to download the webpage [Tesla Revenue 2010-2021 | TSLA](https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue). Then save the text of the response as a variable named html_data.
"""

url = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'
html_data = requests.get(url).text

"""Now we parse the html data using beautiful_soup."""

soup = BeautifulSoup(html_data,"html5lib")

"""Using beautiful soup we extract the table with Tesla Quarterly Revenue and store it into a dataframe named tesla_revenue.

For this project our dataframe will have columns Date and Revenue, and we'll remove the comma and dollar sign from the Revenue column.
"""

tesla_revenue = pd.DataFrame(columns=['Date', 'Revenue'])

for table in soup.find_all('table'):

    if ('Tesla Quarterly Revenue' in table.find('th').text):
        rows = table.find_all('tr')
        
        for row in rows:
            col = row.find_all('td')
            
            if col != []:
                date = col[0].text
                revenue = col[1].text.replace(',','').replace('$','')

                tesla_revenue = tesla_revenue.append({"Date":date, "Revenue":revenue}, ignore_index=True)

"""We removed the rows in the dataframe that are empty strings or are NaN in the Revenue column. And then printed the entire tesla_revenue DataFrame."""

tesla_revenue

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'].astype(bool)]

"""Here we'll display the last 5 row of the tesla_revenue dataframe using the tail function."""

tesla_revenue.tail()

"""# Using yfinance to Extract Stock Data (GME)

We'll repeat the process using the Ticker function. But this time we want GameStop stock data, and its ticker symbol is GME.
"""

gme = yf.Ticker('GME')

"""Using the ticker object and the function history, we extract stock information and save it in a dataframe named gme_data. Once again we set the period parameter to max so we get information for the maximum amount of time."""

gme_data = gme.history(period='max')

"""We reset the index using the reset_index(inplace=True) function on the gme_data DataFrame and display the first five rows of the gme_data dataframe using the head function."""

gme_data.reset_index(inplace=True)
gme_data.head()

"""# Using Webscraping to Extract GME Revenue Data (GME)

We'll use the requests library to download the webpage [GameStop Revenue 2010-2021 | GME
](https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork-23455606&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork-23455606&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork-23455606&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork-23455606&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ). And save the text of the response as a variable named html_data.
"""

url = 'https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue'
html_data = requests.get(url).text

"""Now we parse the html data using beautiful_soup."""

soup = BeautifulSoup(html_data,"html5lib")

"""Using beautiful soup we extract the table with GameStop Quarterly Revenue and store it into a dataframe named gme_revenue.

For this project our dataframe will have columns Date and Revenue, and we'll remove the comma and dollar sign from the Revenue column.
"""

gme_revenue = pd.DataFrame(columns=['Date', 'Revenue'])

for table in soup.find_all('table'):

    if ('GameStop Quarterly Revenue' in table.find('th').text):
        rows = table.find_all('tr')
        
        for row in rows:
            col = row.find_all('td')
            
            if col != []:
                date = col[0].text
                revenue = col[1].text.replace(',','').replace('$','')

                gme_revenue = gme_revenue.append({"Date":date, "Revenue":revenue}, ignore_index=True)

"""We display the last five rows of the gme_revenue dataframe using the tail function."""

gme_revenue.tail()

"""# Plotting the Tesla Stock Graph

Now we're going to plot a graph with the information we colected, for this we'll use the make_graph function to graph the Tesla Stock Data. The structure to call the make_graph function is make_graph(tesla_data, tesla_revenue, 'Tesla')
"""

make_graph(tesla_data[['Date','Close']], tesla_revenue, 'Tesla')

"""# Plotting the GameStop Stock Graph

We'll repeat the last step here. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, 'GameStop').
"""

make_graph(gme_data[['Date','Close']], gme_revenue, 'GameStop')

"""### Project developed by marcoshsq (づ｡◕‿‿◕｡)づ"""
